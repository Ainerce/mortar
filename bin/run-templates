#!/usr/bin/env node

var ejs = require('ejs');
var fs = require('fs');
var path = require('path');
var child_process = require('child_process');

if(process.argv.length <= 3) {
    console.log('Usage: ' + process.argv[0] + ' <dest> <tmpl>');
    process.exit();
}

var ROOT = path.join(path.dirname(process.argv[1]), '..');
var DEST = process.argv[2];
var TMPL = process.argv[3];

// These are the possible "blocks" of content that template instances
// can override
var blocks = {
    head: 'head.html',
    footer: 'footer.html',
    js_global: 'js_global.js',
    js_init: 'js_init.js',
    js_require_cfg: 'js_require_cfg.js',
    css: 'css.css'
};

var defaults = {
    js_requires: '[], function() {'
};

function get_meta(dir) {
    var p = path.join(dir, 'project.json');

    if(path.existsSync(p)) {
        return JSON.parse(fs.readFileSync(p));
    }

    return {};
}

function make_scope(dir) {
    var scope = {};
    var meta = get_meta(dir);

    // Start off with the parent's scope if inheriting a template
    if(meta.inherits) {
        var p = path.join(ROOT, 'templates', meta.inherits);
        if(path.existsSync(p)) {
            scope = make_scope(p);
        }
    }

    // Grab all the blocks of content in the template instance,
    // defaulting to empty string
    for(var block in blocks) {
        var file = path.join(dir, blocks[block]);
        if(path.existsSync(file)) {
            scope[block] = fs.readFileSync(file, 'utf-8');
        }
        else if(!scope[block]) {
            scope[block] = defaults[block] || '';
        }
    }

    return scope;
}

function run(file, scope) {
    // Replace the templated blocks with content
    var src = fs.readFileSync(DEST + file);
    src = ejs.render('' + src, scope);
    fs.writeFileSync(DEST + file, src);
}

var scope = make_scope(TMPL);
run('/www/index.html', scope);
run('/www/js/app.js', scope);
run('/www/css/app.css', scope);
